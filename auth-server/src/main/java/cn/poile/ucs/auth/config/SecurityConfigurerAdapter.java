package cn.poile.ucs.auth.config;import org.springframework.data.redis.core.StringRedisTemplate;import cn.poile.ucs.auth.provider.MobileAuthenticationProvider;import cn.poile.ucs.auth.service.UserDetailsServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configuration@EnableWebSecuritypublic class SecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsServiceImpl userDetailsService;    @Autowired    private StringRedisTemplate stringRedisTemplate;    @Bean    @Override    public AuthenticationManager authenticationManagerBean() throws Exception {        return super.authenticationManagerBean();    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.authenticationProvider(provider()).userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http                .httpBasic().and()                .csrf().disable();    }    @Bean    public MobileAuthenticationProvider provider() {        MobileAuthenticationProvider provider = new MobileAuthenticationProvider();        provider.setStringRedisTemplate(stringRedisTemplate);        provider.setHideUserNotFoundExceptions(false);        provider.setUserDetailsService(userDetailsService);        return provider;    }}