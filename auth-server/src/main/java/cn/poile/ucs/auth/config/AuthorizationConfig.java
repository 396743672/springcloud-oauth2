package cn.poile.ucs.auth.config;import cn.poile.ucs.auth.service.UserDetailsServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;import org.springframework.security.oauth2.provider.*;import org.springframework.security.oauth2.provider.client.BaseClientDetails;import org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter;import org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter;import org.springframework.security.oauth2.provider.token.DefaultTokenServices;import org.springframework.security.oauth2.provider.token.TokenStore;import org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;import java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeUnit;@Configuration@EnableAuthorizationServerpublic class AuthorizationConfig extends AuthorizationServerConfigurerAdapter {    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private UserDetailsServiceImpl userDetailsService;    @Autowired    private RedisConnectionFactory redisConnectionFactory;    @Bean    public ClientDetailsService clientDetails() {        return new ClientDetailsService() {            @Override            public ClientDetails loadClientByClientId(String clientId) throws ClientRegistrationException {                BaseClientDetails clientDetails = new BaseClientDetails();                clientDetails.setAuthorities(new ArrayList<>());                clientDetails.setClientId("yaohw");                clientDetails.setClientSecret("$2a$10$CwIutywnbs9bifHaY3Ezu.gYkWi4Zano8gVPq08hXjal6.uj.Yzuy");                //clientDetails.setClientSecret("yaohw");                List<String> scopes = new ArrayList<>(1);                scopes.add("sever");                clientDetails.setScope(scopes);                List<String> grantTypes = new ArrayList<>(2);                grantTypes.add("password");                grantTypes.add("refresh_token");                clientDetails.setAuthorizedGrantTypes(grantTypes);                return clientDetails;            }        };    }    @Bean    public TokenStore tokenStore() {        return new RedisTokenStore(redisConnectionFactory);    }    @Override    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {        clients.withClientDetails(clientDetails());    }    @Override    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {        endpoints.tokenStore(tokenStore())                .authenticationManager(authenticationManager)                .userDetailsService(userDetailsService)                .tokenGranter(tokenGranter(endpoints));        // 配置TokenServices参数        DefaultTokenServices tokenServices = new DefaultTokenServices();        tokenServices.setTokenStore(endpoints.getTokenStore());        // 是否支持刷新Token        tokenServices.setSupportRefreshToken(true);        tokenServices.setReuseRefreshToken(true);        tokenServices.setClientDetailsService(endpoints.getClientDetailsService());        tokenServices.setTokenEnhancer(endpoints.getTokenEnhancer());        tokenServices.setAccessTokenValiditySeconds((int) TimeUnit.HOURS.toSeconds(2));        tokenServices.setRefreshTokenValiditySeconds((int) TimeUnit.DAYS.toSeconds(30));        endpoints.tokenServices(tokenServices);    }    @Override    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {        security                .allowFormAuthenticationForClients()                .tokenKeyAccess("permitAll()")                .checkTokenAccess("isAuthenticated()");    }    public TokenGranter tokenGranter(AuthorizationServerEndpointsConfigurer endpoints) {        List<TokenGranter> list = new ArrayList<>();        list.add(new ResourceOwnerPasswordTokenGranter(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));        list.add(new RefreshTokenGranter(endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));        return new CompositeTokenGranter(list);    }}