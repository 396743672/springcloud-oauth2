package cn.poile.ucs.auth.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;import org.springframework.security.oauth2.provider.*;import org.springframework.security.oauth2.provider.client.BaseClientDetails;import org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter;import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;import java.util.ArrayList;import java.util.List;@Configuration@EnableAuthorizationServerpublic class AuthorizationConfig  extends AuthorizationServerConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private AuthorizationServerTokenServices tokenServices;    @Override    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {        endpoints.authenticationManager(authenticationManager)                .userDetailsService(userDetailsService)                .tokenGranter(tokenGranter(endpoints.getOAuth2RequestFactory()));    }    @Override    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {        security                .tokenKeyAccess("isAuthenticated()")                .checkTokenAccess("permitAll()");    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    public ClientDetailsService clientDetailsService() {        return new ClientDetailsService() {            @Override            public ClientDetails loadClientByClientId(String s) throws ClientRegistrationException {                BaseClientDetails clientDetails = new BaseClientDetails();                clientDetails.setAuthorities(new ArrayList<>());                clientDetails.setClientId("yaohw");                clientDetails.setClientSecret("yaohw");                List<String> scopes = new ArrayList<>(1);                scopes.add("sever");                clientDetails.setScope(scopes);                List<String> grantTypes = new ArrayList<>(1);                grantTypes.add("password");                clientDetails.setAuthorizedGrantTypes(grantTypes);                return new BaseClientDetails();            }        };    }    public TokenGranter tokenGranter(OAuth2RequestFactory requestFactory) {        List<TokenGranter> list = new ArrayList<>();        list.add(new ResourceOwnerPasswordTokenGranter(authenticationManager,tokenServices,clientDetailsService(),requestFactory));        return new CompositeTokenGranter(list);    }}